UDP functions

CLIENT

//create socket
sockfd = socket(AF_INET, SOCK_DGRAM, 0)

//set server address, sin is short for sockaddr_in
ser_addr.sin_family = AF_INET;
ser_addr.sin_port = htons(MYUDP_PORT);
memcpy(&(ser_addr.sin_addr.s_addr), *addrs, sizeof(struct in_addr));
bzero(&(ser_addr.sin_zero), 8);

//send data to a specific socket
sendto(sockfd, &sends, strlen(sends), 0, addr, addrlen)

addr is &ser_addr, address of server to send data to
addrlen is sizeof(struct sockaddr_in)

SERVER

//create socket
sockfd = socket(AF_INET, SOCK_DGRAM, 0)

//bind socket to associate socket with the given local address, bind() is usually used when the process intends to use a specific network address and port number
my_addr.sin_family = AF_INET;
my_addr.sin_port = htons(MYUDP_PORT);
my_addr.sin_addr.s_addr = INADDR_ANY; //in case system has multiple IP addresses
bzero(&(my_addr.sin_zero), 8);
bind(sockfd, (struct sockaddr *) &my_addr, sizeof(struct sockaddr))

//receive data from client
struct sockaddr_in addr;
len = sizeof (struct sockaddr_in);
recvfrom(sockfd, &recvs, MAXSIZE, 0, (struct sockaddr *)&addr, &len))

&addr is client address which is set when data is received
this address can then be used to return ack


//Assignment Implementation
The message is split into short data-units (DUs) which are sent and acknowledged in batches of size n. 
The sender sends n DUs and then waits for an ACK before sending the next batch of n DUs. 
It repeats the above procedure until the entire file is sent and the acknowledgement for the last batch is received. 
The receiver sends an ACK after receiving n DUs. 
It repeats the above procedure, until the acknowledgement for the last batch is sent. 
Note that the last batch may have less than n DUs.

DATALEN is size of each Data Unit/Packet
BATCHSIZE is number of Data Units sent before ACK required

To send BATCHSIZE Data Units before requiring ACK from server, 
a for loop is added within the while loop which keeps track of the current index <= filesize

In each iteration of inner for loop for (int i = 1; i <= BATCHSIZE; i++)
copy data of size DATALEN from buffer to sends array

In the case of sending the last batch with less than BATCHSIZE Data Units, a flag will break out of the for loop (lsize+1-ci) <= DATALEN

After sending BATCHSIZE Data Units, client waits for ACK from server before continuing while loop

Similar for server side, server waits to receive BATCHSIZE Data Units before sending ACK
If last Data Unit received, if (recvs[n-1] == '\0')
set end to 1 and break out of for loop and while loop

//Appropriate values for DATALEN


https://www.geeksforgeeks.org/udp-server-client-implementation-c/


/**************************************
udp_ser.c: the source file of the server in udp transmission
**************************************/
#include "headsock.h"

void str_ser(int sockfd, struct sockaddr *addr, int addrlen);                                                        

int main(int argc, char *argv[]) {

	int sockfd, ret;
	struct sockaddr_in my_addr;
	
	sockfd = socket(AF_INET, SOCK_DGRAM, 0);                                     //create socket
	if (sockfd < 0) {			
		printf("error in socket");
		exit(1);
	}

	my_addr.sin_family = AF_INET;
	my_addr.sin_port = htons(MYUDP_PORT);
	my_addr.sin_addr.s_addr = INADDR_ANY;
	bzero(&(my_addr.sin_zero), 8);
	ret = bind(sockfd, (struct sockaddr *) &my_addr, sizeof(struct sockaddr));   //bind socket
	if (ret < 0) {           
		printf("error in binding");
		exit(1);
	}
	while (1) {
		printf("Waiting for data...\n");
		str_ser(sockfd, (struct sockaddr *)&my_addr, sizeof(struct sockaddr_in));
	}
	
	close(sockfd);
	exit(0);
}

void str_ser(int sockfd, struct sockaddr *addr, int addrlen) {
	char buf[BUFSIZE];
	FILE *fp;
	char recvs[DATALEN];
	struct ack_so ack;
	int end, n = 0;
	long lseek=0;
	end = 0;
	
	while(!end) {
		for (int i = 1; i <= BATCHSIZE; i++) {
			n = recvfrom(sockfd, &recvs, DATALEN, 0, addr, &addrlen);
			if (n ==-1) {
				printf("error when receiving\n");
				exit(1);
			}
			printf("[server] received packet %d\n", i);
			if (recvs[n-1] == '\0') {
				end = 1;
				n--;
			}
			memcpy((buf+lseek), recvs, n);
			printf("%d bytes of data received\n", n);
			lseek += n;
			if (end) {
				break;
			}
		}
		ack.num = 1;
		ack.len = 0;
		n = sendto(sockfd, &ack, 2, 0, addr, addrlen);
		if (n ==-1) {
			printf("send error!");								//send the ack
			exit(1);
		}
		printf("[server] sent an ack\n");
	}

	if ((fp = fopen ("myUDPreceive.txt","wt")) == NULL) {
		printf("File doesn't exit\n");
		exit(0);
	}
	fwrite (buf , 1 , lseek , fp);					//write data into file
	fclose(fp);
	printf("a file has been successfully received!\nthe total data received is %d bytes\n", (int)lseek);


}




/**************************************
udp_ser.c: the source file of the server in udp transmission
**************************************/
#include "headsock.h"

void str_ser(int sockfd);                                                        

int main(int argc, char *argv[]) {

	int sockfd, ret;
	struct sockaddr_in my_addr;
	
	sockfd = socket(AF_INET, SOCK_DGRAM, 0);                                     //create socket
	if (sockfd < 0) {			
		printf("error in socket");
		exit(1);
	}

	my_addr.sin_family = AF_INET;
	my_addr.sin_port = htons(MYUDP_PORT);
	my_addr.sin_addr.s_addr = INADDR_ANY;
	bzero(&(my_addr.sin_zero), 8);
	ret = bind(sockfd, (struct sockaddr *) &my_addr, sizeof(struct sockaddr));   //bind socket
	if (ret < 0) {           
		printf("error in binding");
		exit(1);
	}
	while (1) {
		printf("Waiting for data...\n");
		str_ser(sockfd);
	}
	
	close(sockfd);
	exit(0);
}

void str_ser(int sockfd) {
	char buf[BUFSIZE];
	FILE *fp;
	char recvs[DATALEN];
	struct ack_so ack;
	int end, addrlen, n = 0;
	long lseek=0;
	struct sockaddr_in cli_addr;
	end = 0;
	
	while(!end) {
		for (int i = 1; i <= BATCHSIZE; i++) {
			n = recvfrom(sockfd, &recvs, DATALEN, 0, (struct sockaddr *)&cli_addr, &addrlen);
			if (n ==-1) {
				printf("error when receiving\n");
				exit(1);
			}
			printf("Data Unit %d received!!!\n", i);
			if (recvs[n-1] == '\0') {
				end = 1;
				n--;
			}
			memcpy((buf+lseek), recvs, n);
			printf("Size of Data Unit: %d Bytes\n", n);
			lseek += n;
			if (end) {
				break;
			}
		}
		ack.num = 1;
		ack.len = 0;
		n = sendto(sockfd, &ack, 2, 0, (struct sockaddr *)&cli_addr, addrlen);
		if (n ==-1) {
			printf("send error!");								//send the ack
			exit(1);
		}
		printf("ACK sent to client\n");
	}

	if ((fp = fopen ("myUDPreceive.txt","wt")) == NULL) {
		printf("File doesn't exit\n");
		exit(0);
	}
	fwrite (buf , 1 , lseek , fp);					//write data into file
	fclose(fp);
	printf("a file has been successfully received!\nthe total data received is %d bytes\n", (int)lseek);
}